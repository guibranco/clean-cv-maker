import { z } from 'zod';

export const personalInfoSchema = z.object({
  fullName: z.string().min(1, 'Full name is required'),
  title: z.string().min(1, 'Professional title is required'),
  location: z.string().min(1, 'Location is required'),
  email: z.string().email('Invalid email address').min(1, 'Email is required'),
  phone: z.string().min(1, 'Phone number is required'),
  githubUrl: z.string().url('Invalid GitHub URL').optional().or(z.literal('')),
  linkedinUrl: z.string().url('Invalid LinkedIn URL').optional().or(z.literal('')),
  portfolioUrl: z.string().url('Invalid portfolio URL').optional().or(z.literal('')),
  willRelocate: z.boolean(),
  bio: z.string().min(1, 'Professional bio is required'),
  experienceYears: z.array(z.object({
    technology: z.string().min(1, 'Technology name is required'),
    startDate: z.string().min(1, 'Start date is required'),
  })).optional(),
  projectsWorked: z.array(z.string()).optional(),
  languages: z.array(z.object({
    language: z.string().min(1, 'Language name is required'),
    proficiency: z.number().min(0).max(5),
  })).optional(),
  hasExperience: z.boolean().optional(),
  hasProjects: z.boolean().optional(),
  hasEducation: z.boolean().optional(),
  hasCertificates: z.boolean().optional(),
  experiences: z.array(z.object({
    companyName: z.string().min(1, 'Company name is required'),
    companyLogoUrl: z.string().optional(),
    companySize: z.string().optional(),
    companyIndustry: z.string().optional(),
    companyDescription: z.string().optional(),
    contractType: z.enum(['', 'full-time', 'part-time', 'freelance']),
    workSchema: z.enum(['', 'on-site', 'remote', 'hybrid']),
    startDate: z.string().min(1, 'Start date is required'),
    endDate: z.string().optional(),
    current: z.boolean(),
    roles: z.array(z.object({
      title: z.string().min(1, 'Role title is required'),
      startDate: z.string().min(1, 'Role start date is required'),
      endDate: z.string().optional(),
      current: z.boolean(),
      description: z.string().min(1, 'Role description is required'),
      achievements: z.array(z.string()),
    })).min(1, 'At least one role is required'),
  })).optional(),
  education: z.array(z.object({
    institution: z.string().min(1, 'Institution name is required'),
    institutionLogo: z.string().url('Invalid logo URL').optional().or(z.literal('')),
    degree: z.string().min(1, 'Degree is required'),
    startDate: z.string().min(1, 'Start date is required'),
    endDate: z.string().optional(),
    current: z.boolean(),
    topics: z.array(z.string()),
  })).optional(),
  projects: z.array(z.object({
    name: z.string().min(1, 'Project name is required'),
    icon: z.string().url('Invalid icon URL').optional(),
    description: z.string().min(1, 'Project description is required'),
    sourceCodeUrl: z.string().url('Invalid source code URL').optional(),
    isSourceOpen: z.boolean(),
    demoUrl: z.string().url('Invalid demo URL').optional(),
    hasDemoAvailable: z.boolean(),
    documentationUrl: z.string().url('Invalid documentation URL').optional(),
    hasDocumentation: z.boolean(),
    startDate: z.string().min(1, 'Start date is required'),
    techStack: z.array(z.string()).max(10, 'Maximum 10 technologies allowed'),
  })).optional(),
  certificates: z.array(z.object({
    name: z.string().min(1, 'Certificate name is required'),
    issuer: z.string().min(1, 'Issuer is required'),
    issuerLogo: z.string().url('Invalid logo URL').optional().or(z.literal('')),
    issueDate: z.string().min(1, 'Issue date is required'),
    expiryDate: z.string().optional(),
    neverExpires: z.boolean(),
    credentialId: z.string().optional(),
    credentialUrl: z.string().url('Invalid credential URL').optional().or(z.literal('')),
    topics: z.array(z.string()),
    isPaid: z.boolean(),
  })).optional(),
});

export type PersonalInfoFormData = z.infer<typeof personalInfoSchema>;